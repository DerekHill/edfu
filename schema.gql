# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum DictionaryOrThesaurus {
  dictionary
  thesaurus
}

enum LexicalCategory {
  noun
  pronoun
  verb
  adjective
  adverb
  preposition
  conjunction
  interjection
  determiner
  residual
  other
}

type LikeDto {
  userId: ID!
  senseId: ID!
  signId: ID!
}

type Mutation {
  createLikes(senseId: ID, signId: ID!): [LikeDto!]!
  removeLikes(senseId: ID, signId: ID!): [LikeDto!]!
}

type Query {
  hello: String!
  oxIds(filter: Boolean = false, searchString: String!): [String!]!
  hydratedSensesExisting(senseId: String = "", filter: Boolean = false, oxId: String!): [SenseHydratedDto!]!
  senseSigns(senseId: String!): [SenseSignForwardDto!]!
  hydratedSensesLex(searchString: String!): [SenseHydratedDto!]!
  signs: [SignDto!]!
  likes(senseId: ID, signId: ID): [LikeDto!]!
}

type SenseHydratedDto {
  oxId: String!
  homographC: Float!
  ownEntryOxId: String!
  ownEntryHomographC: Float!
  senseId: ID!
  lexicalCategory: LexicalCategory!
  apiSenseIndex: Float!
  example: String
  definition: String
  associationType: DictionaryOrThesaurus!
  similarity: Float!
  signs: [SignDto!]
}

type SensePureDto {
  ownEntryOxId: String!
  ownEntryHomographC: Float!
  senseId: ID!
  lexicalCategory: LexicalCategory!
  apiSenseIndex: Float!
  example: String
  dictionaryOrThesaurus: DictionaryOrThesaurus!
}

type SenseSignBackDto {
  userId: ID!
  senseId: ID!
  signId: ID!
  sense: SensePureDto!
}

type SenseSignForwardDto {
  userId: ID!
  senseId: ID!
  signId: ID!
  sign: SignDto
}

type SignDto {
  _id: ID!
  userId: ID!
  mnemonic: String!
  s3KeyOrig: String!
  transcodings: [TranscodingDto!]
  senseSigns: [SenseSignBackDto!]
}

type TranscodingDto {
  s3Key: String!
  height: Float!
  width: Float!
  duration: Float!
  size: Float!
  bitrate: Float!
  rotation: Float!
}
